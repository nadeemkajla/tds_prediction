# --- Install and import required libraries ---
!pip install seaborn --quiet

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.impute import SimpleImputer, KNNImputer
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge
from sklearn.inspection import permutation_importance

# --- Step 1: Load and preprocess data ---
file_path = "/content/Data TFT.csv"
data = pd.read_csv(file_path)

# Date parsing and sorting
data['Date'] = pd.to_datetime(data['Date'], dayfirst=True, errors='coerce')
data.sort_values(by=['Well_ID', 'Date'], inplace=True)

# Extract date parts
data['Year'] = data['Date'].dt.year
data['Month'] = data['Date'].dt.month
data['Day'] = data['Date'].dt.day
data['DayOfWeek'] = data['Date'].dt.dayofweek

# Generate lagged features
for col in ['TDS', 'Hydraulic Head', 'Precipitation']:
    for lag in [1, 3, 7]:
        data[f'{col}_lag_{lag}'] = data.groupby('Well_ID')[col].shift(lag)

# Drop rows with NaNs introduced by lagging
data.dropna(subset=['TDS_lag_1', 'TDS_lag_3', 'TDS_lag_7'], inplace=True)

# KNN Impute missing numeric values
imputer = KNNImputer(n_neighbors=5)
data[data.select_dtypes(include=np.number).columns] = imputer.fit_transform(data.select_dtypes(include=np.number))

# Define features
features = [
    #'Year', 'Month', 'Day', 'DayOfWeek',
    'Hydraulic Head', 'Precipitation',
    'Distance_From_Sea', 'Hydraulic_Conductivity', 'Specific_Yield',
   # 'TDS_lag_1', 'TDS_lag_3', 'TDS_lag_7',
    #'Hydraulic Head_lag_1', 'Hydraulic Head_lag_3', 'Hydraulic Head_lag_7',
    #'Precipitation_lag_1', 'Precipitation_lag_3', 'Precipitation_lag_7'
]

X = data[features]
y = data['TDS']

# Impute (redundant post-KNN, but safe) and scale
X = pd.DataFrame(SimpleImputer(strategy='mean').fit_transform(X), columns=features)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# --- Step 2: Train Ridge Regression Model ---
ridge_model = Ridge(alpha=1.0)
ridge_model.fit(X_train, y_train)

# --- Step 3: Permutation Feature Importance ---
result = permutation_importance(ridge_model, X_test, y_test, n_repeats=10, random_state=42)

importance_df = pd.DataFrame({
    'Feature': features,
    'Importance': result.importances_mean
}).sort_values(by='Importance', ascending=False)

# --- Step 4: Plot Importance ---
plt.figure(figsize=(10, 6))
sns.barplot(data=importance_df, x='Importance', y='Feature', palette='crest')
plt.title('Permutation Feature Importance (Ridge Regression)')
plt.tight_layout()
plt.savefig("/content/permutation_feature_importance.png", dpi=300)
plt.show()
